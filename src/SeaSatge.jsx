/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useMemo } from "react";
import {
  Canvas,
  extend,
  useThree,
  useLoader,
  useFrame,
} from "@react-three/fiber";
import { useGLTF, PositionalAudio, MeshReflectorMaterial } from "@react-three/drei";
import { Water2 } from "three-stdlib";

extend({ Water2 });

function Ocean(props) {
  const waterRef = useRef();

  const normalMap0 = useLoader(
    THREE.TextureLoader,
    "/textures/Water_1_M_Normal.jpg"
  );
  const normalMap1 = useLoader(
    THREE.TextureLoader,
    "/textures/Water_2_M_Normal.jpg"
  );

  useEffect(() => {
    if (normalMap0 && normalMap1) {
      const waterGeometry = new THREE.CircleGeometry(119, 24);
      const water2 = new Water2(waterGeometry, {
        color: "#ffffff",
        scale: 12,
        flowDirection: new THREE.Vector2(2, 2),
        textureWidth: 1024,
        textureHeight: 1024,
        normalMap0: normalMap0,
        normalMap1: normalMap1,
        reflectivity: .2,
        blending: THREE.AdditiveBlending,
      });
      // water2.renderOrder = 0
      // water2.material.depthWrite = false;

      waterRef.current.add(water2);
    }
    return () => {
      if (water2) {
        water2.geometry.dispose();
        water2.material.dispose();
      }
    };
  }, [normalMap0, normalMap1]);

  return <group ref={waterRef} {...props} />;
}

export function SeaSatge(props) {
  const { nodes, materials } = useGLTF("/models/海岛建筑.glb");

  useEffect(() => {
    materials.material.blending = THREE.CustomBlending;
    materials.material.transparent = true;
    materials.material.opacity = .8
  }, []);

  return (
    <group {...props} dispose={null}>
      {props.ready && (
        <PositionalAudio autoplay loop url="/audio/sea1.mp3" distance={100} />
      )}
      <group
        position={[2.356, 30.059, 3.247]}
        rotation={[-Math.PI / 2, 0, Math.PI]}
      >
        <group position={[4.645, 5.329, -8.299]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Environment_0.geometry}
            material={materials.Environment}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Fortress_0.geometry}
            material={materials.Fortress}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Fortress_0001.geometry}
            material={materials.Fortress}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Fortress_0002.geometry}
            material={materials.Fortress}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Sand_0.geometry}
            material={materials.Sand}
          />
        </group>
      </group>
      <mesh
        receiveShadow
        geometry={nodes.Sea_Sea_0.geometry}
        material={materials.material}
        position={[-0.191, 44.908, 2.054]}
        rotation={[-Math.PI / 2, 0, 0]}
      />

      <Ocean
        position={[0, -1.2, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
        receiveShadow
      />
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sky_Sky_0.geometry}
        material={materials.material_4}
        rotation={[-Math.PI / 2, 0, 0]}
      /> */}
    </group>
  );
}

useGLTF.preload("/models/海岛建筑.glb");
